/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package regres.automation.api.teste;




import io.restassured.RestAssured;
import io.restassured.matcher.ResponseAwareMatcher;
import io.restassured.response.Response;
import io.restassured.module.jsv.JsonSchemaValidator;
import static io.restassured.module.jsv.JsonSchemaValidator.matchesJsonSchemaInClasspath;

import org.apache.http.HttpStatus;
import org.hamcrest.CoreMatchers;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import regres.automation.api.dominio.Usuario;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import static io.restassured.RestAssured.*;
import static io.restassured.module.jsv.JsonSchemaValidator.matchesJsonSchemaInClasspath;
import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.core.Is.is;


public class TesteUsuario extends TesteBase {
    private static final String USUARIO_ENDPOINT = "/users";

    private List<Usuario> carregarUsuariosDoArquivo() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        Usuario[] usuariosArray = objectMapper.readValue(getClass().getResourceAsStream("/usuarios.json"), Usuario[].class);
        return Arrays.asList(usuariosArray);
    }

    @Test
    public void criacaoUsuarios() throws IOException {
        List<Usuario> usuarios = carregarUsuariosDoArquivo();

        for (Usuario usuario : usuarios) {
            given().
                    body(usuario).
                    when().
                    post(USUARIO_ENDPOINT).
                    then().
                    statusCode(HttpStatus.SC_CREATED).
                    body("name", is(usuario.getName())).
                    body("job", is(usuario.getJob()));
        }
    }


    @Ignore
    //teste será ignorado ate  o retorno devido ser implementado

    public void criacaoUsuariosInvalido() throws IOException {
        Usuario usuarioInvalido = new Usuario("Nome Inválido", "Cargo Inválido");

        given().
                body(usuarioInvalido).
        when().
                post(USUARIO_ENDPOINT).
        then().
                statusCode(HttpStatus.SC_BAD_REQUEST);



}






    @Test
    public void buscaUsuarioExistente() throws IOException{
        given().
                param("id","12").
        when().
                get(USUARIO_ENDPOINT).
        then().
                statusCode(HttpStatus.SC_OK).
                body("data", is(notNullValue())).
                body("data.email", is("rachel.howell@reqres.in")).
                body("data.first_name", is("Rachel")).
                body("data.last_name", is("Howell")).
                body("data.avatar", is("https://reqres.in/img/faces/12-image.jpg"));

    }


    @Test
    public void buscaHumUsuarioinexistente() throws IOException{
        given().
                param("id","120").
                when().
                get(USUARIO_ENDPOINT).
                then().
                statusCode(HttpStatus.SC_NOT_FOUND).
                body(is("{}"));



    }

    @Test
    public void validaContrato() throws IOException{

        given().
                param("id","9").
                when().
                get(USUARIO_ENDPOINT).
                then().
                statusCode(HttpStatus.SC_OK).
                body(matchesJsonSchemaInClasspath("userSchema.json"));


    }




}

